#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

int x[4] ={1,0,-1,0};
int y[4] ={0,1,0,-1};
bool Barray[1000][1000][4];

int change_dir(int dir,char dir2){
    if(dir2=='R'){
        if(dir==0){
            return 1;
        }else if(dir==1){
             return 2;
        }else if(dir==2){
             return 3;
        }else if(dir==3){
             return 0;
        }
    }else if(dir2=='L'){
       if(dir==0){
            return 3;
        }else if(dir==1){
             return 0;
        }else if(dir==2){
             return 1;
        }else if(dir==3){
             return 2;
        }
    }
}
// grid_len은 배열 grid의 길이입니다.
// 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
int* solution(const char* grid[], size_t grid_len) {
    // return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    char Carray[grid_len][strlen(grid[0])];
    int add=0;
    int rarray[add];
    
    for(int i=0;i<grid_len;i++){//단어분리
        for(int j=0;j<strlen(grid[0]);j++){
            char* tmp=grid[i];
            Carray[i][j]=tmp[j];
            
        }
    }
    
    for(int i=0;i<grid_len;i++){//단어분리
        for(int j=0;j<strlen(grid[i]);j++){
            for(int k=0;k<4;k++){
                int dx=j;
                int dy=i;
                int len=0;
                int a=0;
                while(1){                    
                    if(Barray[dy][dx][k]==true){//printf("done \t ");
                        break;}
               //     printf("%d %d %d %d %c ->",dy,dx,k,len,Carray[dy][dx]);
                    Barray[dy][dx][k]=true;
                    if(Carray[dy][dx]!='S'){k=change_dir(k,Carray[dy][dx]);}
                    dx=dx+x[k];
                    dy=dy+y[k];
                    if(dx<0){dx=strlen(grid[0])-1;}
                    if(dy<0){dy=grid_len-1;}
                    if(dx>=strlen(grid[0])){dx=0;}
                    if(dy>=grid_len){dy=0;}
                    len++;
               //     printf("%d %d %d %d %c \n",dy,dx,k,len,Carray[dy][dx]);
                   
                }
                 if(len!=0){
                     add++;
                     
                     rarray[add-1]=len;
                    
                }
              //  puts("");
            }
            
        }
    }

    int* answer = (int*)malloc(add*sizeof(int));
   for(int i=0;i<add;i++){
        answer[i]=rarray[i];
    }
    //printf("%d",add);
    for(int i=0;i<add;i++){
        for(int j=0;j<add-1;j++){
            if(answer[j]>answer[j+1]){
                 int temp = answer[j];       
                 answer[j] = answer[j+1];
                 answer[j+1] = temp;                 
            }            
            
        }
    }
    return answer;
}