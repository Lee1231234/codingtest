#include stdio.h
#include stdbool.h
#include stdlib.h
bool barray[1000][1000][4];
int num;
int x[4] ={1,0,-1,0};
int y[4] ={0,1,0,-1};
int len3,len2;
int change_dir(int dir,char dir2){
    if(dir2=='R'){
        if(dir==0){
            return 1;
        }else if(dir==1){
             return 2;
        }else if(dir==2){
             return 3;
        }else if(dir==3){
             return 0;
        }
    }else{
       if(dir==0){
            return 3;
        }else if(dir==1){
             return 0;
        }else if(dir==2){
             return 1;
        }else if(dir==3){
             return 2;
        }
    }
}
int fun(int i,int j,int dir,int len,char (grid)[num]){
   
    if(barray[i][j][dir]==true){return len;}
    barray[i][j][dir]=true;
    
    
    printf(%d %d %d %d %c -,i,j,dir,len,grid[i][j]);
    if(grid[i][j]!='S'){dir=change_dir(dir,grid[i][j]);}
    i= i+y[dir];
    j= j+x[dir];
    if(i==len3){i=0;}
    if(j==len2){j=0;}
    if(i0){i=len3-1;}
    if(j0){j=len2-1;}
     printf(%d %d %d %d %c n,i,j,dir,len,grid[i][j]);
    return fun(i,j,dir,len+1,(char)grid);
}
 grid_len은 배열 grid의 길이입니다.
 파라미터로 주어지는 문자열은 const로 주어집니다. 변경하려면 문자열을 복사해서 사용하세요.
int solution(const char grid[], size_t grid_len) {
   char grid2[grid_len][strlen(grid[0])];
   num = strlen(grid[0]);
    len3=grid_len;
    len2=strlen(grid[0]);
   for(int i=0;igrid_len;i++){
        char tmp = grid[i];
       for(int j=0;jstrlen(grid[i]);j++){
           grid2[i][j]=tmp[j];
          
       }
   }
    int result;
    int add=0;
    int turn[add];

     return 값은 malloc 등 동적 할당을 사용해주세요. 할당 길이는 상황에 맞게 변경해주세요.
    for(int i=0;igrid_len;i++){
     
        for(int j=0;jstrlen(grid[0]);j++){
           
            for(int k=0;k4;k++){
                result=fun(i,j,k,0,(char)grid2);
                if(result!=0){
                   add++;
                   turn[add-1]=result;
                    결과
                }
            }
        }
    }
    int answer = (int)malloc(addsizeof(int));
    for(int i=0;iadd;i++){
        answer[i]=turn[i];
    }
       for(int i=0;iadd;i++){
        for(int j=0;jadd-i;j++){
            if(answer[j]answer[j+1]){
                int tmp;
                tmp=answer[j];
                answer[j]=answer[j+1];
                answer[j]=tmp;
            }
        }
    }
    return answer;
}