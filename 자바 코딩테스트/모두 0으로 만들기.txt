import java.util.*;
class Solution {
    static long answer = 0;
    static long[] tmp;
    static boolean[] visit;
    static List<Integer>[] list;
    public long solution(int[] a, int[][] edges) {
        list = new ArrayList[a.length];
        visit = new boolean[a.length];
        tmp = new long[a.length];
        long sum = 0;
        for(int i=0;i<a.length;i++){
            list[i] =new ArrayList<Integer>();
            tmp[i] = a[i];
            sum+=a[i];
        }        
        if(sum!=0) return -1;
        //인접리스트 생성
        for(int i=0;i<edges.length;i++){
            list[edges[i][0]].add(edges[i][1]);
            list[edges[i][1]].add(edges[i][0]);
        }      
        //dfs를 통한 부모노드로 값 이동
        dfs(0);       
        return answer;
    }
    void graph(int x,int y,ArrayList<ArrayList<Integer>> list){
        list.get(x).add(y);
        list.get(y).add(x);
    }
    long dfs(int node){
        visit[node] = true;
        for(int i=0; i<list[node].size(); i++){
            int next = list[node].get(i);           
            if(visit[next]) continue;
            tmp[node] += dfs(next);            
        }
     
        long num = tmp[node];
        answer += Math.abs(num);
        return num;
    }
}