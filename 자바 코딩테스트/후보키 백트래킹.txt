import java.util.*;
class Solution {
    List<HashSet<Integer>> list;
    public int solution(String[][] relation) {
        
         for (int i = 1; i <=relation[0].length ; i++) {       
            combination(0,i,0,new HashSet<>(),relation);
        }
       
        return answer;
    }
    public void combination(int start, int size, int depth, HashSet<Integer> set,String[][] relation) {
        if (size == depth) {// 결과
            
            //유일성
            if(!unique(set,relation)) return;
            //최소성
            for (HashSet<Integer> key : list) {
                if(set.containsAll(key)) {
                    return;
                }
            }                     
            //저장
            list.add(set);
          ;
            return;                          
        }        
        for (int i = start; i < relation[0].length; i++) {
            HashSet<Integer> tmp = new HashSet<>(set);
            tmp.add(i);
            start++;
            combination(start,size,depth+1,tmp,relation);           
        }
    }
    public boolean unique(HashSet<Integer> set,String[][] relation) {
        List<String> tmp = new ArrayList<>();        
        for (int i = 0; i < relation.length; i++) {
            StringBuilder sb = new StringBuilder();
            for (int j:set) {
                sb.append(relation[i][j]);
            }
            if(!tmp.contains(sb.toString())) {
                tmp.add(sb.toString());
            } else {
                return false;
            }
        }
        return true;
    }

}