import java.util.*;
class Solution {
    static int[] dr ={1,0,0,-1};
    static int[] dc = {0,-1,1,0 };
    static int[][] visit; 
 
    public int solution(int[][] maps) {
     
        visit = new int[maps.length][maps[0].length];
      
        
        bfs(maps);
        int answer = visit[maps.length-1][maps[0].length-1];
       
        return answer!=0?answer:-1;
    }
    void bfs(int[][]maps){
        Queue<int[]> q = new LinkedList<>();
        
        q.add(new int[]{0,0});
        visit[0][0]= 1;
      
        while(!q.isEmpty()){
            int[] tmp =q.poll();
            int r = tmp[0];
            int c = tmp[1];
          
            for(int i=0;i<4;i++){
                int r1 = r+ dr[i];
                int c1 = c+dc[i];
                
                if(r1<0||c1<0||r1>maps.length-1||c1>maps[0].length-1) continue;
                
                if(maps[r1][c1]==1&&visit[r1][c1]==0){                                    
                    visit[r1][c1]=visit[r][c]+1;
                    q.add(new int[]{r1,c1});
                }
            }
            
        }
        
    }
}