import java.util.*;
class Solution {
    int[] dx = {0,0,1,-1};
    int[] dy = {1,-1,0,0};
    public int solution(int[][] game_board, int[][] table) {
        int size= table.length;
        boolean[][] tVisit = new boolean[size][size];
        boolean[][] gVisit = new boolean[size][size];      
        List<List<int[]>> tList = new ArrayList<>();
        List<List<int[]>> gList = new ArrayList<>();
        //board와 table에서 빈칸과 조각이 놓인칸 분리.
        for(int i=0;i<size;i++){
            for(int j=0;j<size;j++){
                if(!tVisit[i][j]&&table[i][j]==1){
                    bfs(i,j,1,table,tList,tVisit);
                }
                if(!gVisit[i][j]&&game_board[i][j]==0){
                   bfs(i,j,0,game_board,gList,gVisit);
                }
                    
            }
        }
        int answer = comparePuzzle(tList,gList);
       
        return answer;
    }
    int comparePuzzle(List<List<int[]>> tList,List<List<int[]>> gList){
        int result =0;
        boolean[] visit = new boolean[gList.size()];
        for(int i=0;i<tList.size();i++){
            for(int j=0;j<gList.size();j++){
                if(visit[j]||tList.get(i).size()!=gList.get(j).size()) continue;
                if(rotate(tList.get(i),gList.get(j))){
                    visit[j] = true;
                    result += gList.get(j).size();
                    break;
                }
            }
        }
        
        return result;
    }
    boolean rotate(List<int[]> tList,List<int[]> gList){
       boolean result = false;
        //오름차순 정렬
        gList.sort((o1, o2) ->{
            if(o1[0]!=o2[0]){
                return o1[0] - o2[0];
            }else{
                return o1[1] - o2[1];
            }          
        });
        
        for(int i=0;i<4;i++){
            tList.sort((o1, o2) ->{
            if(o1[0]!=o2[0]){
                return o1[0] - o2[0];
            }else{
                return o1[1] - o2[1];
            }          
            });
            int xkey = tList.get(0)[0];
            int ykey = tList.get(0)[1];
            //좌표값을 0,0부터 시작
            for(int j=0;j<tList.size();j++){
                tList.get(j)[0] -= xkey;
                tList.get(j)[1] -= ykey;
            }
            boolean flag = true;
            for(int j=0;j<gList.size();j++){
                if(tList.get(j)[0]!=gList.get(j)[0]||tList.get(j)[1]!=gList.get(j)[1]){
                    flag = false;
                    break;
                }
            }
            if(flag){
                result = true;
                break;
            } else{
                //회전
                 for(int j=0; j<tList.size(); j++){
                    int tmp = tList.get(j)[0];
                    tList.get(j)[0] = tList.get(j)[1];
                    tList.get(j)[1] = -tmp;
                }
            }
        }
        return result;
    }
    void bfs(int x, int y,int type,int[][] board,List<List<int[]>> list, boolean[][] visit){
        visit[x][y] =true;
        Queue<int[]> q = new LinkedList<>();
        q.add(new int[]{x,y});
        List<int[]> tmp = new ArrayList<>();
        tmp.add(new int[]{0,0});
        while(!q.isEmpty()){
            int[] gap = q.poll();
            for(int i=0;i<4;i++){
                int nx = gap[0] + dx[i];
                int ny = gap[1] + dy[i];
                if(nx<0||ny<0||nx>=board.length||ny>=board.length) continue;
                if(board[nx][ny]==type&&!visit[nx][ny]){
                    visit[nx][ny]=true;
                    tmp.add(new int[]{nx-x,ny-y});
                    q.add(new int[]{nx,ny});
                }
            }
            
            
        }
        list.add(tmp);
    }
}