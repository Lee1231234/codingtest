class Solution {
    int[][] board;
    int n;
    public int solution(int[][] board) {
        this.board=board;
        n = board.length;
        int answer = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==0)continue;
                //5가지 블록의 형태일때.
                if(check1(i,j)){//블록의 형태가 ㄴ일때
                    if(drop(i,j+1)&&drop(i,j+2)){
                        remove(i,j,i+1,j,i+1,j+1,i+1,j+2);
                        answer++;
                        j= -1;
                    }
                }
                else if(check2(i,j)){//블록의 형태가 ㄴ을 뒤집은 형태일때
                    if(drop(i,j-1)&&drop(i,j-2)){
                        remove(i,j,i+1,j,i+1,j-1,i+1,j-2);
                        answer++;
                        j= -1;
                    }
                    
                }
                else if(check3(i,j)){// 블록의 형태가 ㄴ을 90도 반시계방향으로 돌렸을때
                    if(drop(i+1,j-1)){
                        remove(i,j,i+1,j,i+2,j,i+2,j-1);
                        answer++;
                        j= -1;
                    }
                    
                }
                else if(check4(i,j)){// 블록의 형태가 ㄴ을 뒤집은 형태가 90도 시계방향으로 돌렸을때
                    if(drop(i+1,j+1)){
                        remove(i,j,i+1,j,i+2,j,i+2,j+1);
                        answer++;
                        j= -1;
                    }
                    
                }
                else if(check5(i,j)){// 블록의 형태가 ㅗ 일때
                    if(drop(i,j-1)&&drop(i,j+1)){
                        remove(i,j,i+1,j,i+1,j+1,i+1,j-1);
                        answer++;
                        j= -1;
                    }                   
                }
            }
        }
        
       
        return answer;
    }
    // 검은 돌 떨어트리기
    boolean drop(int x,int y){
        for(int i=0;i<=x;i++){
            if(board[i][y]==0) continue;
            else return false;
        }       
        return true;
    }
    // 보드 삭제
    void remove(int x1,int y1,int x2,int y2,int x3,int y3,int x4,int y4){
        board[x1][y1] =0;
        board[x2][y2] =0;
        board[x3][y3] =0;
        board[x4][y4] =0;
    }
    boolean check1(int x, int y){
        int tmp = board[x][y];
        if(x + 1 >= n || y + 2 >= n) return false;
        boolean flag = board[x + 1][y] == tmp && board[x + 1][y + 1] == tmp && board[x + 1][y + 2] == tmp;
        return flag;
        
    }
    boolean check2(int x, int y){
        int tmp = board[x][y];
        if(x + 1 >= n || y - 2 < 0) return false;
        boolean flag = board[x + 1][y] == tmp && board[x + 1][y - 1] == tmp && board[x + 1][y - 2] == tmp;
        return flag;
        
    }
    boolean check3(int x, int y){
        int tmp = board[x][y];
        if(x + 2 >= n || y - 1 < 0) return false;
        boolean flag = board[x + 2][y] == tmp && board[x + 1][y] == tmp && board[x + 2][y - 1] == tmp;
        return flag;
        
    }
    boolean check4(int x, int y){
        int tmp = board[x][y];
        if(x + 2 >= n || y + 1 >= n) return false;
        boolean flag = board[x + 2][y] == tmp && board[x + 1][y] == tmp && board[x + 2][y + 1] == tmp;
        return flag;
        
    }
    boolean check5(int x, int y){
        int tmp = board[x][y];
        if(x + 1 >= n || y + 1 >= n || y - 1 < 0) return false;
        boolean flag = board[x + 1][y] == tmp && board[x + 1][y + 1] == tmp && board[x + 1][y - 1] == tmp;
        return flag;
        
    }
}