import java.util.*;
class Solution {
    public int solution(int[][] land) {
        int x = land.length;
        int y = land[0].length;
        int[] oil = new int[y];
        int answer = 0;
        
        boolean[][] visit = new boolean[x][y];
        for(int i=0;i<x;i++){
            for(int j=0;j<y;j++){
                if(!visit[i][j]&&land[i][j]==1){
                    bfs(i,j,oil,visit,land);
                    
                }
            }
        }
        for(int i=0;i<y;i++){
            answer =Math.max(answer,oil[i]);
        }
        
        return answer;
    }
    void bfs(int x, int y,int[] oil,boolean[][] visit,int[][] land){
        int[] dx = {1,-1,0,0};
        int[] dy = {0,0,1,-1};
        int count = 1;
        visit[x][y] = true;
        Queue<int[]> queue= new LinkedList<>();
        queue.add(new int[]{x,y});
        HashSet<Integer> set = new HashSet<>();
        while(!queue.isEmpty()){
            int[] tmp = queue.poll();
            set.add(tmp[1]);                      
            for(int i=0;i<4;i++){
                int nx = tmp[0] + dx[i];
                int ny = tmp[1] + dy[i];
            
                if(check(nx,ny,land)) continue;
                
                if(!visit[nx][ny]){
                    queue.add(new int[]{nx,ny});
                    count++;
                    visit[nx][ny]= true;
                }
            }
        }
        for(int i:set){
            oil[i] += count;
        }
    }
    boolean check(int x,int y,int[][] land){
        int n = land.length;
        int m = land[0].length;
        if(x<0||y<0||x>=n||y>=m||land[x][y]==0) return true;
        return false;
    }
}//리스트를 통한 모으기
