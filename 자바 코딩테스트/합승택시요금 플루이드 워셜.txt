class Solution {
    public int solution(int n, int s, int a, int b, int[][] fares) {
        int N = n;
		int M = fares.length;
		// 플로이드 초기 거리 테이블 초기화
		int[][] dist = new int[N][N];
		for (int i = 0; i < N; i++) {
			for (int j = 0; j < N; j++) {
				// 자기 자신으로 가는 길은 최소 비용이 0이다.
				if (i == j) {
					dist[i][j] = 0;
					continue;
				}
				// 자기 자신으로 가는 경우를 제외하고는 매우 큰 값(N개의 노드를 모두 거쳐서 가더라도 더 큰 값).
				dist[i][j] = 100_000_000;
			}
		}

		
        for (int i = 0; i < M; i++) {
			
			int num1 = fares[i][0]-1;
			int num2 = fares[i][1]-1;
			int cost = fares[i][2];

			// 가는 경로가 하나가 아닐 수 있다. 따라서 그 중 최소 비용을 저장해두면 된다.
			dist[num1][num2] = Math.min(dist[num1][num2], cost);
			dist[num2][num1] = Math.min(dist[num2][num1], cost);
		}
		// 플로이드 워셜 알고리즘
		// 노드를 1개부터 N개까지 거쳐가는 경우를 모두 고려한다.
		for (int k = 0; k < N; k++) {
			// 노드 i에서 j로 가는 경우.
			for (int i = 0; i < N; i++) {
				for (int j = 0; j < N; j++) {
					// k번째 노드를 거쳐가는 비용이 기존 비용보다 더 작은 경우 갱신
					// 또는 연결이 안되어있던 경우(INF) 연결 비용 갱신.
					dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
				}
			}
		}

		
        int min =10000000;
        
			for (int j = 0; j < N; j++) {				
                min = Math.min(min,dist[s-1][j]+dist[j][a-1]+dist[j][b-1]);
			}
			
		
       
      
        return min;
    }
}//플루이드 워셜 알고리즘 vs 다익스트라 알고리즘