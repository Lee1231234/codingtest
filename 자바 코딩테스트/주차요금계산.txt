import java.util.*;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

class Solution {
    public int[] solution(int[] fees, String[] records) {

        HashMap<String,Integer> map1 = new HashMap<>();
        HashMap<String,Integer> map2 = new HashMap<>();
        for(String record:records){
            String[] array =record.split(" ");
            String[] tmp = array[0].split(":");
            if(array[2].equals("IN")){             
                map1.put(array[1],Integer.parseInt(tmp[0])*60+Integer.parseInt(tmp[1]));
            }else{
                int nextInt =Integer.parseInt(tmp[0])*60+Integer.parseInt(tmp[1]);        
                map2.put(array[1],map2.getOrDefault(array[1],0)+nextInt-map1.get(array[1]));
                map1.remove(array[1]);
            }
        }

        for (Entry<String,Integer> entrySet : map1.entrySet()) {            
            map2.put(entrySet.getKey(),map2.getOrDefault(entrySet.getKey(),0)+(23*60+59)-entrySet.getValue());
        }
        
        List<String> keyList = new ArrayList<>(map2.keySet());
        int[] answer = new int[keyList.size()];
        keyList.sort((s1, s2) -> s1.compareTo(s2));
      
        for(int i=0;i<keyList.size();i++){
            if(map2.get(keyList.get(i))<fees[0]){
                answer[i]=fees[1];
            }else{
                if((map2.get(keyList.get(i))-fees[0])%fees[2]>0){
                    answer[i]=fees[1]+((map2.get(keyList.get(i))-fees[0])/fees[2]+1)*fees[3];
                }else{
                    answer[i]=fees[1]+(map2.get(keyList.get(i))-fees[0])/fees[2]*fees[3];
                }
                
            }
        }
        
        return answer;
    }
}//해쉬맵에 마지막 값을 넣어줌.