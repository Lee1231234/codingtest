import java.lang.Math;
class Solution {
    public int[] solution(long[] numbers) {
        int[] answer = new int[numbers.length];
        for(int i=0;i<numbers.length;i++){
            String binary = Long.toBinaryString(numbers[i]);
            binary= levelNumber(binary);          
            if(binaryTree(binary)){
                answer[i]=1;
            }else{
                answer[i]=0;
            }            
        }
         
      
       
        return answer;
    }
    //포화 이진트리를 만드는 함수
    String levelNumber(String number){
        int length = number.length();
        int level = 0;
        
        while(length!=0){
            level++;
            length=length/2;
        }
        int nodecount=(int)Math.pow(2,level)-1;
       
        number= "0".repeat(nodecount-number.length())+number;
      
        return number;
    }
    //트리확인
    boolean binaryTree(String number){
        if(number.length()==0) return true;
        int mid = number.length()/2;
        String righttree = number.substring(0,mid);
        String lefttree = number.substring(mid+1,number.length());//자기자신을 빼기위한 +1
        if(number.charAt(mid)=='0'){
            return zeroTree(righttree)&&zeroTree(lefttree);
        }
        return binaryTree(righttree)&&binaryTree(lefttree);
    }
    //제로트리 검사
    boolean zeroTree(String number){      
        for(int i=0;i<number.length();i++){
            if(number.charAt(i)=='1')
                return false;
        }
        return true;
    }
    
    
}